#!/usr/bin/env python

import eyeD3, os
_Tag = eyeD3.Tag

class Tag( _Tag):
    encoding1 = 'latin_1'
    def setv1Encoding( me, enc): me.encoding1 = enc
    class enco( unicode):
        def encode( me, *a,**k):
            try:
                return unicode.encode( me, Tag.encoding1)
            except:
                print `me`
                raise
    fake1 = False
    def _faker( me, t): return me.fake1 and me.enco(t) or t
    def getTitle( me):  return me._faker( _Tag.getTitle( me))
    def getArtist( me): return me._faker( _Tag.getArtist( me))
    def getAlbum( me):  return me._faker( _Tag.getAlbum( me))

    v12 = False
    def update( me, version =eyeD3.ID3_CURRENT_VERSION, **k):
        me.fake1 = version & eyeD3.ID3_V1 #allow own v1 Encoding
        r = _Tag.update( me, version=version, **k)
        if me.v12 and version & eyeD3.ID3_V2:   #allow v1 additional to v2
            me.fake1 = True
            r = _Tag.update( me, version=eyeD3.ID3_V1, **k)
        me.fake1 = False
        return r
        '''fake1 because of...
    def __saveV1Tag( me, version):
      assert(version & ID3_V1);
      tag = "TAG";
      tag += self._fixToWidth(self.getTitle().encode("latin_1"), 30);
      tag += self._fixToWidth(self.getArtist().encode("latin_1"), 30);
      tag += self._fixToWidth(self.getAlbum().encode("latin_1"), 30);
        ...
'''

    fake2 = False
    def getVersion( me):
        v = _Tag.getVersion( me)
        if me.fake2: v = v & ~eyeD3.ID3_V1
        return v
    def setTextEncoding( me, enc):
        #allow convert v1to2 + setEncoding(v2)
        me.fake2 = True
        r = _Tag.setTextEncoding( me, enc)
        me.fake2 = False
        return r
        '''fake2 because of...
    def setTextEncoding( me, enc):
       if enc != LATIN1_ENCODING and enc != UTF_16_ENCODING and\
          enc != UTF_16BE_ENCODING and enc != UTF_8_ENCODING:
           raise TagException("Invalid encoding");
       elif self.getVersion() & ID3_V1 and enc != LATIN1_ENCODING:
           raise TagException("ID3 v1.x supports ISO-8859 encoding only");
       elif self.getVersion() <= ID3_V2_3 and enc == UTF_8_ENCODING:
           # This is unfortunate.
           raise TagException("UTF-8 is not supported by ID3 v2.3");
        ...
'''

    IMAGE_AUTOSCALE = True
    #this was duplicating images..
    def addImage(self, type, image_file_path, desc = u""):
        image_frame = None
        if image_file_path:
            if self.IMAGE_AUTOSCALE:    #max 1Kx1K, non-progressive
                front = image_file_path+'.mp3.jpg'
                if not os.path.exists( front):
                    print 'autoscale', front
                    print os.system( 'djpeg "%(image_file_path)s" | pnmscale -pixels 1050000 | cjpeg -q 75 -optimize > /tmp/meyd3tmp.jpg' % locals() )
                    import shutil
                    #os.rename( '/tmp/meyd3tmp.jpg', front )
                    shutil.move( '/tmp/meyd3tmp.jpg', front )
                image_file_path = front
            image_frame = eyeD3.ImageFrame.create( type, image_file_path, desc)

        image_frames = self.frames[ eyeD3.IMAGE_FID]
        for i in image_frames:
            if i.pictureType == type:
                if image_frame: #compare
                    for a in 'description mimeType imageData'.split():  #encoding being set afterwards?
                        if getattr( i, a) != getattr( image_frame, a):
                            print 'diff', a, image_file_path
                            if a!='imageData': print `getattr( i, a)`, `getattr( image_frame, a)`
                            break   #diff
                    else:
                        image_frame = None
                        print 'same', type, image_file_path
                        continue   #same
                self.frames.remove(i)

        if image_frame:
            self.frames.addFrame( image_frame)

########### dont save if same tags
    f1 = f2 = None
    def __saveV2Tag( me, v):
        #print 2222222221, object.__repr__(me)
        fnew = [ f.__dict__.copy() for f in me.frames ]
        if me.f2 == fnew: print 222222222, 'same frames'
        else: _Tag.__saveV2Tag( me,v) 

    def __loadV2Tag( me, f):
        if me.v12:
            me.clear()
            me.__loadV1Tag( isinstance( f, file) and f.name or f) #new fileptr plz
            me.clear()
        r = _Tag.__loadV2Tag( me, f)
        me.f2 = [ f.__dict__.copy() for f in me.frames ]
        return r

    def __saveV1Tag( me, v):
        #print 111111111, object.__repr__(me)
        fnew = me.getv1data( enc= True)
        #print 'old', ' '.join( str(s) for s in me.f1.items())
        #print 'new', ' '.join( str(s) for s in fnew.items())
        if me.f1 == fnew: print 111111111, 'same frames'
        else: _Tag.__saveV1Tag( me,v) 

    v1_items = dict( #k:width     
            getTitle = 30,
            getArtist= 30,
            getAlbum = 30,
            getYear  = 4,
            getComments =30,
            getTrackNum =None,
            getGenre    =None,
        )
    def getv1data( me, enc =False):
        r = dict()
        def tx( t,w):
            if not enc: return t
            if not w: return t
            return unicode( v.encode('latin_1'), 'latin_1') [:w].rstrip()   #aaargh see enco()
        for k,w in me.v1_items.items():
            v = getattr( me, k)()
            if enc:
                if isinstance( v, basestring):
                    v = tx( v,w)
                elif isinstance( v, list):
                    v = [ tx( x,w) if x and isinstance(x, basestring) else x for x in v ]
            r[k] = v
        return r
    def __loadV1Tag( me, f):
        r = _Tag.__loadV1Tag( me, f)
        me.f1 = me.getv1data()
        return r

def __eq__(self, o):
    if not isinstance( o, self.__class__): return False
    return self.__dict__ == o.__dict__

eyeD3.tag.Genre.__eq__ = __eq__
#eyeD3.Frame.__eq__ = __eq__


#import eyeD3.utils
#eyeD3.utils.TRACE=1

import eyeD3.tag
eyeD3.Tag = eyeD3.tag.Tag = Tag

import eyeD3_run
_getOptionParser = eyeD3_run.getOptionParser
def getOptionParser():
    op = _getOptionParser()
    op.add_option( '--encv1', dest='encv1',
        help ='str.encoding for v1 - be careful',
        action= 'callback',
        type= str, nargs=1,
        callback= lambda option, opt_str, value, parser: setattr( Tag, 'encoding1', value)
        )
    op.add_option( '--v12', dest='v12',
        help ='if v2, also add v1',
        action= 'callback',
        callback= lambda option, opt_str, value, parser: setattr( Tag, 'v12', True)
        )
    op.defaults[ 'no_tdtg'] = 1
    return op
eyeD3_run.getOptionParser = getOptionParser

_EyeD3Driver = eyeD3_run.EyeD3Driver
class EyeD3Driver( _EyeD3Driver):
    def handleEdits(self, tag):
        oo = (self.opts.track, self.opts.track_total)
        if '' in oo:
            tt = zip( oo, tag.getTrackNum())
            rr = [ None if o == '' else t for o,t in tt]
            tag.setTrackNum( rr, zeropad = self.opts.zeropad)

        if self.opts.remove_comments:   #because elif comments
            count = tag.removeComments()
            eyeD3_run.printWarning("Removing %d comment frames" % count)
            self.opts.remove_comments = None

        return _EyeD3Driver.handleEdits( self, tag)
eyeD3_run.EyeD3Driver = EyeD3Driver        
eyeD3_run.main()

# vim:ts=4:sw=4:expandtab:ft=python
