#$Id: _bashrc,v 1.13 2008-06-18 10:59:20 sdobrev Exp $
### bash-ing

## usage: setenv _INIs=path-to-these-files before sourcing this

## ! bash2.0 needs ending ; before } in func defs
## XXX non-interactive (scripts or -c):
##  ! to use any aliases, bash needs 'shopt -s expand_aliases' (may go in .bashrc - if it is loaded)
##  - to load these at all, setenv BASH_ENV=the-bashrc-file before bash
##  - these are done:
### -- few basic aliases
### -- PATH setting/funcs
### -- loading _SITEs extra-rcs
##  - setenv ALIASYT=1 to also load all the aliases
## the rest is interactive-only
## - cmd-line editor settings - only via .inputrc ; $INPUTRC is for later progs

set +u          #using unset vars is not error
## default root/.bash_profile sets BASH_ENV=$HOME/.bashrc -> always comes here!
## if [ "$PS1" ]; then interactivestuff

al()    { alias  $1="$2"; }     #no parameters allowed!
senv()  { export $1="$2"; }     #global set with export
al _set                         #local set without export
al setenv senv
al so .
#sos()  { echo --"$@"; so "$@"; }
sosi()  { echo --${_INIs}"$1"; so ${_INIs}"$1"; }

if [ "x$1" != "xkeys" ]; then   # if this is at the top, so is not aliased
  test -n "$PS1" && echo "ahaaaa-$0"

  ## aliases
  if [ -n "$PS1" -o -n "$ALIASYT" ]; then
    test -z "$_EXT" && _EXT=.bsh
    sosi defalias$_EXT
  fi

  ## paths
  _DLM=":"
  case "x$OSTYPE" in
    xMSDOS*|xmsdos*) unalias e ; _DLM=";" ;;
  esac

  pathfind() {
  	echo $PATH | egrep -q "(^|$_DLM)$1(\$|$_DLM)"
  }
  pathadd() {
  	if ! pathfind "$1" ; then
  	   if [ "$2" = "after" ] ; then
  	      senv PATH "$PATH$_DLM$1"
  	   else
  	      senv PATH "$1$_DLM$PATH"
  	   fi
  	fi
  }

  test "$USER" == "root" && U=/root || U=/home/$USER
  for x in /home/_bin $U/bin . ; do
      [ -d $x ] && pathadd $x
  done
fi  #non-keys


if [ -n "$PS1" ]; then #interactivestuff
  if [ "x$1" != "xkeys" ]; then   
    al verbose     "set -vx"
    al unverbose   "set +vx"
    #al _setcdpath "senv CDPATH"

    _kbin()   { test -n "$1" -a -n "$2" && bind '"'"$1"'"':"$2"; }             #builtin editfunc
    _kcmd()   { test -n "$1" -a -n "$2" && bind '"'"$1"'"':'"'"$2"\\C-J'"'; }    #with "" and Enter
    _kstr()   { test -n "$1" -a -n "$2" && bind '"'"$1"'"':'"'"$2"'"'; }         #with ""

    al lko  'so ${_INIs}_bashrc keys'
  fi # non-keys

  _set _ESC='\e'
  _set _CTL='\C-'
  _set _delwordB=backward-kill-word
  _set _delwordF=kill-word
  _set _wordF=forward-word
  _set _completeF=menu-complete   # new versions have this; but now list is gone
  #_set _completeF=complete
  _set _completeB=menu-complete-backward    # was = complete if no backwards :(
  _set _completelist=possible-completions
  _set _expand=insert-completions
  _kesc() {
    if test -n "$1" -a -n "$2" -a -n "$_ESC"; then
      export _K_$1="$2"
      export _k_$1=$_ESC"$2"
    else echo "!_kesc empty 1=$1 2=$2 esc=$_ESC"
    fi
  }

# be careful, two commands cannot be bound to same key !!
# [up] cant be both up-history and search-up-history

  case "x$OSTYPE" in
    xMSDOS*|xmsdos*) _set TERM=dosbsh
   ;;
  esac
  T="${MY_TERM:-$TERM}"
  case "x$T" in
   xlinux|xxterm|xdosbsh|xxterm-vte) sosi k-$T;;
   xkonsole*) sosi k-konsole ;;
   x*) echo "what the hell @@@@@ unknown TERM=<$TERM> MY_TERM=<$MY_TERM>" ;;
  esac

  _set k_histUP="$_k_PGUP"
  _set k_histDN="$_k_PGDN"
  [ -n "$_k_F1" ] && sosi keybinds   #load these only if term is sure

  senv INPUTRC $_INIs/_inputrc


  if [ "x$1" != "xkeys" ]; then
	#set bell-style=none	#not by set this way!
	set --				#forget shell arguments from now on
	stty stop undef
	stty start undef
	stty imaxbel

      ####### cmd-history; there is also dir-history
      HISTCONTROL=ignoredups  # dont add hist entry if same as prev.
      HISTIGNORE=?:??         # ignore 1-2char cmds; bash2; a:b:c doesnt work!
      HISTSIZE=500
       #actually, this could be useful for inherited shells;
       #but not for the root one. try remove the histfile at logout/login
      unset HISTFILE

      #glob_dot_filenames=1   # .* is included in * expansion
       # if [xy]* has no match, put nothing instead passing it as arg
      #allow_null_glob_expansion=1

      #FIGNORE=list-of-suffixes-to-be-ignored-by-tab-completion
      IGNOREEOF=1     #2 ctrl-d's = exit
      # prompt: host:user:cwd   # \[ ... \] denote a nonprinting item
      PS1='\w\$ '
      test "`id -u`" -eq 0 && PS1="\[\033[1;31m\]$PS1\[\033[1;00m\]"
      test -n "$SSH_CLIENT" && PS1="\[\033[0;33m\]\u\[\033[1;00m\]@\[\033[0;33m\]\h:\[\033[1;00m\]$PS1"
      #case "x$T" in
      # x*xterm*) PS1="\[\033]0;\u@\h\007\]$PS1" ;;
      #esac
      #so_flt() { $CRLF2LF $1 >tmp_; shift; so tmp_ $@; rm -f tmp_; }
  fi #non-keys
fi  #interactivestuff

if [ "x$1" != "xkeys" ]; then
  for a in $_SITEs; do # 1st common a then a.shell-dependent
  # [ -f $a$_EXT ] && _set a $a$_EXT
    [ -f ${_INIs}$a ] && sosi $a
    [ -f ${_INIs}$a$_EXT ] && sosi $a$_EXT
  done

  if [ -n "$PS1" ]; then #interactivestuff
    tm
    test -x $_INIs/dircolor.py && senv LS_COLORS `$_INIs/dircolor.py -ls`
    which lesspipe >&/dev/null && eval "$(lesspipe)"
  fi  #interactivestuff
fi #non-keys
# eof .bashrc

## en_US bg_BG etc locales collate like AaBb..Zz / aAbB..zZ
#so [A-Z] is NOT_AT_ALL what u think! put this also in etc/profile
senv LC_COLLATE C

# vim:ts=4:sw=4:expandtab
