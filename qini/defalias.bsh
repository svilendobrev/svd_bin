#al so   source
#bash stuff

_CHMOD_S=
#########
al wh     type    # -path'
al rehash 'hash -r'
al z    'fg %vi'  #pop up last suspended vi* job (ctrl-Z doesnt work)

 # -L to follow a link2dir instead of showing the link itself
 # -d to see the link and not to follow
 # ls without .*; -o w/o groups; -g w/o owner
al d    'ls --color=auto -ogF'
al d1   'ls -1'
al da   'ls -lF'
 # ls with .*
al d.   'ls --color=auto -alF'
 # ls .* only; -d is to avoid recursive ls of directories
al d..  'd -d .*'
 # ls executables only
al dx   'd | g "^[^d]..(x|...x|......x)"'
 # ls directories only
ddir()  { d "$@" | grep ^d; } 
dfile() { d "$@" | grep -v ^d; } 
#al dlinkbroken 'find . -type l -exec ls -alF --color {} \; | grep "31;1" '
al dlinkbroken 'find -L . -type l '
al df   'LANG=C df -h'
 # ls directories; then files - choose which version is faster: 2x ls+grep or 1x ls+perl
#al d2   'ddir \!#:* ; dfile \!#:*'
al _d2  "perl -e 'while(<>)"'{if (/^d/||/\/$/) {print} else {push @a,$_}}'" print @a'"
d2()    { d --color "$@" | _d2; } #force coloring

#al llm  'nroff -man \!#:* | less'

al eng  'env | grep'
al seg  'set | grep -A 5'
al alg  'alias | grep'
asg()  { alg "$@" ; seg "^\S*$1\S* \(\)" ; }

al up   'cd ..'
al .. up   
al ...  'cd ../..'
al md   mkdir
al rd   rmdir
nd()    { md -p "$1" ; cd "$1"; } 
al mv   'mv -i'
al _h   'cd ~'          # goto homedir
al _g   'so .go'

#-i: smart case-nonsensitive search; -S: don't wrap long lines; -X: disable init screen save/restore ; -R raw ansi/color
senv    LESS '-i -S -X -R'
al l    less

al t    cat
al g    'grep -E'
al gi   'g -i'
#al tm   date
al tm   'date "+%R %a %x"'
al qt   tm
al q    qt
al zap  'rm -rf'
al e    'vim -n -X'    #no swap - memonly  ; no X server
al vimdiff    'e -d'   
al vimdiffexactws    "e -d --cmd 'let diff_ws_exact=1'"
al m    make
al em   'e [Mm]akefile'
#al renl 'rename.pl y/A-Z/a-z/'  #this works only if  LC_COLLATE=C !!
#al renu 'rename.pl y/a-z/A-Z/'
al renl renl.py   
al renu renu.py   
al ren_ 'rename.py " " _'
al sort 'LC_ALL=C sort'
al hex  'hexdump -C'
al h    hex  

al top  'top -d 1'

al psu  'ps -u $USER --sort=start_time'   # BSD style; override if other layout
test 0 == `id -u` && al psu  'ps ax'   # BSD style; override if other layout
al psfu 'psu -f'
 # my processes, sorted by starttime+PID; or try PPID,PID (3 then 2)
#al mi   'psfu |sort -k 5,5 -k 2;jobs -l'
al mi   'psfu ;jobs -l' # my processes and jobs
 #kill all processes matching pattern
if which pkill >&/dev/null ; then
 al killalll 'pkill -f'  
 al pgrep    'pgrep -f -a'  #search+list full cmd line
else
 _killalll()  { Z=`psfu | g "$1" | g -v grep | cut -c10-15` && test -n "$Z" && kill -9 $Z; } 
 al killalll _killalll
fi 
al killl  killalll
al killll killalll
#al wh   which
al wh   type

 #reload aliases
#al lo   'cd ${_INIs}; make; so defalias$_EXT; cd -'
al lo   'so ${_INIs}/defalias$_EXT'
al lko  'so ${_INIs}keybinds'

elxtr() { e $_INIs/"$1"; } 

al el   'elxtr defalias.bsh'
al elk  'elxtr keybinds'
al elb  'elxtr _bashrc'
al elv  'elxtr _vimrc'
al elbb 'e ~/.bashrc'

_CHMOD_S="$_CHMOD_S loadkeys"

############ find, grep, diff, rm
 #file compare ignoring whitespace
al fc   'diff -btw'
 
fcfile2dir()  { fc -r  "$1" "$2"/"$1"; }
cpfile2dir()  { cp -vL "$1" "$2"/"$1"; }
fcdir2file()  { fc -r  "$2" "$1"/"$2"; }
cpdir2file()  { cp -vL "$2" "$1"/"$2"; }

### filefind from current dir; (give wildcards in quotes)
 #will invoke an ls . if nothing found
#al ff  "find . -name \!#:* | xargs -e ls -lF"
#al ff  "find . -name \!#:* -exec ls -doF \{\} \;"

ffl()   { find . -${II}name "$@"; } 
 #-follow sym-links
fff()   { find . -follow -${II}name "$@"; } 
ff()    { fff "$@" -exec ls -doF '{}' ';'; } 

al ffi  'II=i ff'
al fffi 'II=i fff'
al ffli 'II=i ffl'
# !!! for any other * finds use fff.sh !

##grep what where

 # /dev/null added to force prefixing each line with filename even if one file only
ggg()   { grep -Ens "$@" /dev/null; } 

#al xgg "xargs -e grep -nsE \!#:1 /dev/null" #xargs -e coz otherwise it uses _ as EOFmarker
#al zgg "find . -type f -name \!#:2* | xgg \!#:1"

senv _SRCnojs  '[cChHylgm] [chCH][pP][pP] [chCH][xX][xX] cc CC asm p[ylp] java xsl rb php as'
senv _SRC  "$_SRCnojs js jsx tsx"
senv _EXCL 'CVS .svn .bzr .hg .repo .git'
 #recursive     from current dir grep in source files ONLY
 ###grep --exclude-dir to ignore whole-dirs
 #-f : Disable pathname expansion
 ##_SRC+=" whatever" to add pattern/s
#grs()   { set -f; ggg -r "$@" . `for a in $_SRC; do echo --include="*.$a"; done `; set +f; } 
grs()   { set -f; aSRC=($_SRC); aEXCL=($_EXCL); ggg -r "$@" . ${aSRC[*]/#/--include *.} ${aEXCL[*]/#/--exclude-dir } ; set +f; } 
al gr   grs
#grnojs()   { _SRC="$_SRCnojs" ; grs "$@" ; }
grnonode() { _EXCL+=' node_modules dist build' ; grs "$@" ; }

grm()   { ggg -r --include=[mM]akef\* --include=\*.mak\* --exclude=\*.svn-\* "$@" . ; } 
grh()   { ggg -r --include=\*.html --include=\*.htm --include=\*.css "$@" . ; } 
grxml() { ggg -r --include=\*.xml "$@" . ; } 
grimport()  { gr "(import.*$1|$1.*import)"; }

#see fff.sh for quote troubles
#diff dirs ignoring these
senv FCEXCL "$_EXCL"' .hgtags tags *.pyc __pycache__ *.so *.[oa] *.exe *.proj .snprj *.dep *.req _obj *.gen *.ok *.xx *.result *.tmp _allin1* .#* *.jar *.bin dependencies objects *.class .cvsignore '
#fcsrc()     { set -f; fc -r -I "\$Id.*\$" -I "\$Rev.*\$" `for a in $FCSRC; do echo -x "$a"; done ` "$@"; set +f; } 
fcsrc()     { set -f; aFC=($FCEXCL); fc -r -I "\$Id.*\$" -I "\$Rev.*\$" ${aFC[*]/#/-x } "$@"; set +f; } 

al rmpyc    'find . -depth -follow -name \*.pyc -exec rm {} \; -o -name __pycache__ -exec rm -rf {} \;'
al rmpycl   'find . -depth         -name \*.pyc -exec rm {} \; -o -name __pycache__ -exec rm -rf {} \;'

### file sizes
al dm       'du -m --total'

 # remind me who i am (ID's, phones, etc...)
#al me      "cat ~/bin/me"
al me       'echo "$USER @ $HOSTNAME/ $PWD"'

#al prn  "lp -d laser2d"
#senv CRLF2LF    'perl -ne "s/\r\n/\n/;print"'
al cr2lf    'chall.pl -b "s/\r\n/\n/g"'
al crcr2lf  'chall.pl -b "s/\r/\n/g"'
al lf2cr    'chall.pl -b "s/\n/\r\n/g"'

al utf2win 'encodec.py utf8 cp1251'
al win2utf 'encodec.py cp1251 utf8'

al f vfu
#l calc 'echo "\!#:*" |bc'
#calc()  { echo print "$@" | python ; } 
calc()  { python -c "from math import *; print( $*)"; } 
which ncal >&/dev/null  && al cal 'ncal -M' || al cal '/usr/bin/cal -m'

#addusergroup()  { usermod -G `id -Gn "$1" | sed "s/ /,/g"`,"$2" "$1"; } 
if which adduser >&/dev/null ; then
#XXX ubuntu
 al addusergroup  adduser #useradd 
else
 #XXX arch etc
 addusergroup()  { u=$1; shift; usermod -a -G "$@" $u ; }
fi

#al qiv  'XLIB_SKIP_ARGB_VISUALS=1 qiv -l'
al qiviw 'qiv -s -m -i -f -d 7'

#net
al bt       'btlaunchmanycurses.bittorrent . --max_rate_period 10 --display_interval 2' #--max_upload_rate 60' # --max_initiate 20 --min_peers 10 --max_uploads 3
al tcpstat  'netstat -anp | g tcp'
al netrestart  'sudo /etc/init.d/networking restart'
nct()   { sudo netctl restart $1 ; }
al nctlist  'sudo netctl list|sort'
#eee/lapa
al ww 'iw.py --crypto'
#al nn 'sudo dhclient eth0'

#--content-disposition 
al wgetrnp 'wget -r -np --restrict-file-names=nocontrol --trust-server-names'
al wgetrcnp 'wgetrnp -c'
al wgetrcnpx 'wgetrcnp -R.part -X\*[Ss]ample'
al wgetcd 'wget --content-disposition'


cbedic() { `which cbedic` `echo $@ | utf2win ` | win2utf; }
xxall() { for a in "$@"; do xx "$a"; done }
#xxxall() { for a in "$@"; do nd ":${a//\//:}" && xx "$a" && cd .. ; done }
xxxall() { for a in "$@"; do nd `basename "$a" .zip` && pwd && xx "$a" && cd .. ; done }

al py python 
al py2 python2
al py3 python3
al p3 py3
al piplocal 'pip install --user'
al pip2local 'pip2 install --user'
al pip3local 'pip3 install --user'

al maf 'make -f ~/src/bin/foto/makefile'
al emf 'e ~/src/bin/foto/makefile'

which apt-get   >&/dev/null && so $_INIs/aliasi/apt.alias.bsh
which pacman    >&/dev/null && so $_INIs/aliasi/pacman.alias.bsh
which yum       >&/dev/null && so $_INIs/aliasi/yum.alias.bsh
which systemctl >&/dev/null && so $_INIs/aliasi/systemctl.alias.bsh
so $_INIs/aliasi/audio.alias.bsh
so $_INIs/aliasi/rename.alias.bsh
so $_INIs/aliasi/cddvdrw.alias.bsh
so $_INIs/aliasi/sys.alias.bsh
so $_INIs/aliasi/vcs.alias.bsh
so $_INIs/aliasi/wrongisright.alias.bsh

chmod_s() {
 for f in $_CHMOD_S ; do 
  F=`which $f` && sudo chmod +s $F
  #?? ln -f $F ${F}__ && chmod +s ${F}__
 done 
}

al amx alsamixer
#hardlink, ignore hardlinked, sort-size
al rmli 'rmlint -c sh:link -L -y s -p -T duplicates'

# vim:ts=4:sw=4:expandtab
